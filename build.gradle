/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'application' // Java CLI Application
    id 'build-dashboard' // see `build/reports/buildDashboard/index.html`
    id 'checkstyle' // To check that code follows style standards `build/reports/checkstyle/main.html`
    id 'jacoco' // Test coverage reports `build/reports/jacoco/html/index.html`
    id 'java' // This is a java app
    id 'pmd'    // static analysis at compile-time based on source (does not check compiled code) `build/reports/pmd/main.html`
    id 'project-report' // Try the `gradle projectReport` task. Dependency HTML report at `build/reports/project/dependencies/index.html`
    id 'com.github.spotbugs' version '5.+' // static analysis based on compiled code (does not check source)
    id 'org.openjfx.javafxplugin' version '0.1.0' // JavaFX plugin to build a JavaFX UI application
}

// Versions of libraries to use in this script
//  (note: runtime libraries should not use the .+ syntax, they should be version locked)
def JAVA_LANGUAGE_VERSION = 11
def javafxVersion = '21.0.2'
def junitVersion = '4.+' // Newest 4.x.x that is released
def logbackVersion = '1.5.0'
def pmdToolVersion = '7.+'

javafx { // define the javafx gradle module
    version = "${JAVA_LANGUAGE_VERSION}" // java version
    modules = [ 'javafx.controls', 'javafx.fxml' ] // modules to use in this build. see: https://openjfx.io/javadoc/11/
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "org.openjfx:javafx:${javafxVersion}"

    testImplementation "junit:junit:${junitVersion}"
}

application {
    // Define the main class for the application.
    mainClass = 'org.javafxtemplate.main.MainApp'
}

// Turn on all warnings and errors
tasks.withType(JavaCompile) {
    // Show all warnings and errors except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:all"            // Turn on all warnings
        compilerArgs << "-Werror"               // Turn warnings into errors
        compilerArgs << "-Xdiags:verbose"       // Turn on verbose errors
        encoding = "utf-8"
    }
}

// Turn on logging for all tests
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

checkstyle {
    configFile = rootProject.file("gradle/checkstyle/google_checks.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

pmd {
    toolVersion = "${pmdToolVersion}"
    ignoreFailures = false
    consoleOutput = true
    rulesMinimumPriority = 5

    // custom-rules.xml contains editable rule set
    ruleSetFiles = rootProject.files("gradle/pmd/custom-rules.xml")
}

spotbugs {
    effort = "Max"
    reportLevel = "Low"
}
